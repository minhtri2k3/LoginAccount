/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package log;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import javax.swing.DefaultListModel;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author ASUS
 */
public class PleaseConfirm extends javax.swing.JDialog {
   
    /**
     * Creates new form PleaseConfirm
     */
    private Customer cus;
     private Connection connection = database.connect(); 
     private String seller ;
     private String product;
     private int Quantities_remain;
     private String Import_day_selected;
     private int prize;
     private double Discount;
     private double value;
     private String SKU;
    public PleaseConfirm(java.awt.Frame parent, boolean modal) {
      super(parent, modal);
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Import_day = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        Confirm = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Confirm_quantities = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setText("Chose day import");

        Import_day.setModel(Set());
        Import_day.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Import_dayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Import_day);

        jLabel2.setText("Prize per kg :");

        Confirm.setText("Confirm");
        Confirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConfirmMouseClicked(evt);
            }
        });
        Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmActionPerformed(evt);
            }
        });

        jLabel4.setText("Remaining");

        Confirm_quantities.setText("");
        Confirm_quantities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Confirm_quantitiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Confirm_quantities, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Confirm_quantities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(Confirm))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(414, 307));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public static double calculateDiscountedPrize(String startDate, int initialPrize) throws ParseException {
    // Parse the input date using DateTimeFormatter with "dd/MM/yyyy" pattern
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate startDateObj = LocalDate.parse(startDate, formatter);

    // Get the current date
    LocalDate currentDate = LocalDate.now();

    // Calculate the difference in days
    long daysDifference = Period.between(startDateObj, currentDate).getDays();

    // Calculate the number of days in 15 days
    long fifteenDaysInDays = 15;

    // Calculate the number of 15-day intervals passed
    int elapsedIntervals = (int) (daysDifference / fifteenDaysInDays);

    // Calculate the discount factor (30% reduction for each 15-day interval)
    double discountFactor = Math.pow(0.7, elapsedIntervals);

    // Calculate the discounted prize
    double discountedPrize = initialPrize * discountFactor;

    return discountedPrize;
}
   private String Transfer_VND(double value){
        String res = "";
        double temp = (double)value/1000;
        res = String.valueOf(temp +"K VND/kg");
        return res;
   }
    private void Import_dayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Import_dayMouseClicked
//         Import_day_selected = Import_day.getSelectedValue();
       
        this.Get_Data_Prize();
        try {
            this.Import_day_selected = Import_day.getSelectedValue();
            String temp =  convertDateFormat(Import_day_selected);
            Quantities_remain = Quantity(temp);
              Discount = this.calculateDiscountedPrize(Import_day_selected ,prize );
             jLabel2.setText("Prize: " + this.Transfer_VND(Discount));
     
        } catch (ParseException ex) {
            Logger.getLogger(PleaseConfirm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Import_dayMouseClicked
    private void Take_SKU(){
        PreparedStatement pst = null;
        try{
             String temp = "Select Vendor from admins where Admin_name = ?; ";
               pst = connection.prepareCall(temp);
               pst.setString(1, seller);
               ResultSet rs = pst.executeQuery(); 
               while(rs.next()){
                   this.SKU = rs.getString("Vendor");
                   
               }
        }catch(Exception e){
            
        }
    }
    private void ConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConfirmMouseClicked
          this.Take_SKU();
         
        try {
            // Try to parse the input as a double
             double result  = Double.parseDouble(Confirm_quantities.getText());
             
            if(result > Quantities_remain || result < 0){
             JOptionPane.showMessageDialog(this ,"We dont have enough quantities you need"); // Wrong
         }else{
             // correct situation
               System.out.println(seller +" "+ product +" "+ Import_day_selected +" "+ result +"  The discount is " + Discount + "\n");
             this.value = result*Discount;
             double total = (result*Discount)/1000;
            int check = JOptionPane.showConfirmDialog(
                this,
                "Your total prize will be "+ (int)total +"K VND", // Message
                "Confirmation", // Title
                JOptionPane.YES_NO_OPTION // Option type
        );
            if(check == JOptionPane.YES_NO_OPTION){
                  this.Save_Orders_Into_SQL();
            }else{
                System.out.println("Deny");
            }
         }
        } catch (NumberFormatException e) {
            // Parsing failed, it's not a number
            JOptionPane.showMessageDialog(this, "Wrong! It's not a number/n Or you dont input value.", "Error", JOptionPane.ERROR_MESSAGE);
        }
         
    }//GEN-LAST:event_ConfirmMouseClicked
    private void Save_Orders_Into_SQL(){
          PreparedStatement pst = null;
           try{
               String temp = "insert into orders ( SKU , Import_day , Product , Company , Price , Buyer ) values (? ,? , ?, ?, ? ,? ); ";
               pst = connection.prepareCall(temp);
               pst.setString(1, SKU);
               pst.setString(2,Import_day_selected);
               pst.setString(3, product);
               pst.setString(4, seller);
               pst.setDouble(5, value);
               String user_name = cus.getUsername();
               pst.setString(6, user_name);
               int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Data inserted successfully.");
            } else {
                System.out.println("Failed to insert data.");
            }
              
          }catch(Exception e){
              
          }
    }
    private void Confirm_quantitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Confirm_quantitiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Confirm_quantitiesActionPerformed

    private void ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmActionPerformed
//         String Input_amount = Confirm_quantities.getText();
//         double amount = Double.parseDouble(Input_amount);
       
        
     
    }//GEN-LAST:event_ConfirmActionPerformed
   public void Set_test_list(String seller , String product , Customer cus){
       this.seller = seller;
       this.product = product;
       this.cus = cus;
       Import_day.setModel( this.Set());
    
     
   }
   private void Get_Data_Prize(){
          PreparedStatement pst = null;
          try{
               String temp = "Select price from fruit_price where product_name = ?; ";
               pst = connection.prepareCall(temp);
               pst.setString(1, product);
               ResultSet rs = pst.executeQuery(); 
               while(rs.next()){
                   this.prize = rs.getInt("price");
                   
               }
          }catch(Exception e){
              
          }
          
   }
    private DefaultListModel <String>  Set(){
        DefaultListModel <String> DML = new DefaultListModel<>();
      
         PreparedStatement pst = null;
    try{
            String temp = "Select Import_day from admins where Admin_name = ? and Product = ?; ";
            pst = connection.prepareCall(temp);
            pst.setString(1,seller);
            pst.setString(2, product);
            ResultSet rs = pst.executeQuery(); 
            while(rs.next()){
                String item = rs.getString("Import_day");
                String formatedDateStr = formatDate(item);
                DML.addElement(formatedDateStr);
            }  
            
        }catch(Exception e){
           e.printStackTrace();
        }

      return DML;
    }
     private String formatDate(String originalDateStr) {
        try {
            // Parse the original date string
            SimpleDateFormat originalFormat = new SimpleDateFormat("ddMMyyyy");
            Date originalDate = originalFormat.parse(originalDateStr);

            // Format the date into the desired format
            SimpleDateFormat desiredFormat = new SimpleDateFormat("dd/MM/yyyy");
            return desiredFormat.format(originalDate);
        } catch (ParseException e) {
            e.printStackTrace();
            return "Invalid Date";
        }
    }
    private String convertDateFormat(String inputDate) throws ParseException {
        // Parse the input date
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = inputFormat.parse(inputDate);

        // Format the date as "ddMMyyyy"
        SimpleDateFormat outputFormat = new SimpleDateFormat("ddMMyyyy");
        String outputDate = outputFormat.format(date);

        return outputDate;
    } 
    private int Quantity(String day){
        int res =0;
        try{
            PreparedStatement stm = connection.prepareStatement("Select Quantity from admins where Admin_name = ? and Product = ? and Import_day = ?");
            stm.setString(1, seller);
            stm.setString(2, product);
            stm.setString(3, day);
            ResultSet rs = stm.executeQuery();
            if(rs.next()){
               res = rs.getInt("Quantity");
               jLabel4.setText("Remaining "+ String.valueOf(res));
                
             }
        }catch(Exception e){
            
        }
        return res;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PleaseConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PleaseConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PleaseConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PleaseConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PleaseConfirm dialog = new PleaseConfirm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Confirm;
    private javax.swing.JTextField Confirm_quantities;
    private javax.swing.JList<String> Import_day;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
